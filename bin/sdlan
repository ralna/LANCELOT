#!/bin/csh
# sdlan: script to decode an sif file and then run lancelot on the output
#        for Unix systems using g77
#
# Use: sdlan [-s] [-h] [-k] [-m i] [-o j] [-l secs] probname
#
# where: options -s : run the single precision version
#                     (Default: run the double precision version)
#                -h : print this help and stop execution
#                -k : keep the load module after use
#                     (Default: delete the load module)
#                -m : 0 for choice by LANCELOT,
#                     1 for SBMIN, 2 for AUGLG.
#                     (Default: -m 0)
#                -o : 0 for silent mode, 1 for brief description of
#                     the stages executed.
#                     (Default: -o 0)
#                -l : sets a limit of secs second on the LANCELOT
#                     runtime
#                     (Default: 99999999 seconds)
#
#       probname      probname.SIF is the name of the file containing
#                     the SIF file for the problem of interest.
#

#
#  N. Gould and Ph. Toint, December 4th, 1990, for CGT Productions.
#

#
#  basic system commands
#

set LS=/bin/ls
set RM="/bin/rm -f"
unset noclobber

#
#  directory for temporary files
#

set TMP=/tmp

#
#  variables for each option
#

#
#  LIMIT (maximum cputime for running LANCELOT)
#

set LIMIT=99999999

#
# PRECISION = 0 (single precision), = 1 (double precision)
#

set PRECISION=1

#
# KEEP = 0 (discard lancelot load module after use), = 1 (keep it)
#

set KEEP = 0

#
# OUTPUT = 0 (summary output), = 1 (detailed output from decoder)
#

set OUTPUT=0

#
# METHOD = 0 (LANCELOT chooses), = 1 (SBMIN), = 2 (AUGLG)
#

set METHOD=0

#
#  interpret arguments
#


@ last = $#argv

if($last == 0) then
  echo 'Use: sdlan [-s] [-h] [-k] [-m i] [-o j] [-l secs] probname'
  exit 1
endif

@ i=1

while ($i <= $last)
  set opt=$argv[$i]
  if("$opt" == '-h')then
    echo ' Use: sdlan [-s] [-h] [-k] [-m i] [-o j] [-l secs] probname'
    echo ' '
    echo ' where: options -s : run the single precision version'
    echo '                     (Default: run the double precision version)'
    echo '                -h : print this help and stop execution'
    echo '                -k : keep the load module after use '
    echo '                     (Default: delete the load module)'
    echo '                -m : 0 for choice by LANCELOT,'
    echo '                     1 for SBMIN, 2 for AUGLG'
    echo '                     (Default: -m 0)'
    echo '                -o : 0 for silent mode, 1 for brief description of'
    echo '                     the stages executed'
    echo '                     (Default: -o 0)'
    echo '                -l : sets a limit of secs second on the LANCELOT'
    echo '                     runtime'
    echo '                     (Default: unlimited cputime)'
    echo ' '
    echo '       probname      probname.SIF is the name of the file containing'
    echo '                     the SIF file for the problem of interest.'
    exit 0
  else if("$opt" == '-s')then
    set PRECISION=0
  else if("$opt" == '-k')then
    set KEEP=1
  else if("$opt" == '-o')then
    @ i++
    set OUTPUT=$argv[$i]
  else if("$opt" == '-l')then
    @ i++
    set LIMIT=$argv[$i]
  else if("$opt" == '-m')then
    @ i++
    set METHOD=$argv[$i]
  endif
  @ i++
end

if (! -e "$argv[$last].SIF") then
  echo "file $argv[$last].SIF is not known in directory $PWD."
  echo "possible choices are:"
  echo ' '
  $LS *.SIF
  echo ' '
  exit 2
endif

if ($OUTPUT) then
  echo 'convert the sif file into data and routines suitable for lancelot ...'
  echo ' '
  echo 'problem details will be given'
  echo ' '
endif

if (-e EXTERN.f) $RM EXTERN.f

#  problem decoding

echo $argv[$last] > $TMP/sdlan.input
echo $METHOD >> $TMP/sdlan.input
echo $OUTPUT >> $TMP/sdlan.input

if (! $PRECISION ) then
  $LANDIR/bin/sifdec_single < $TMP/sdlan.input
else
  $LANDIR/bin/sifdec_double < $TMP/sdlan.input
endif
$RM $TMP/sdlan.input

#  check for decoding errors

if( -e OUTSDIF.d && ! -z OUTSDIF.d ) then
  if ($OUTPUT) echo ' '
else
  echo " Error in compiling the problem.  Correct and re-execute."
  exit 1
endif

#  run LANCELOT

if (! $PRECISION && ! $KEEP) then
  $LANDIR/bin/lan -n -s -o $OUTPUT -l $LIMIT
else if (! $PRECISION && $KEEP) then
  $LANDIR/bin/lan -n -s -k -o $OUTPUT -l $LIMIT
else if ($PRECISION && ! $KEEP) then
  $LANDIR/bin/lan -n -o $OUTPUT -l $LIMIT
else if ($PRECISION && $KEEP) then
  $LANDIR/bin/lan -n -k -o $OUTPUT -l $LIMIT
endif
